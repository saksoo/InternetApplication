Γενικά σχόλια για την άσκηση

1. Η άσκηση έχει υλοποιηθεί με την τεχνολογία jsp. Συγκεκριμένα έχουμε τα αρχεία jsp στον apache tomcat και τη βάση δεδομένων μας
σε γλώσσα Mysql στον wampserver. Τα ενώνουμε με τον jdbc connector για τη Myqsl και στέλνουμε τα ερωτήματα μας. 

2. Όπου γίνεται εισαγωγή δεδομένων από το χρήστη, ακολουθούμε την εξής λογική. Ας πάρουμε για παράδειγμα την εγγραφή register.jsp. 
Εκεί έχουμε τη φόρμα μας, όπου θα δέχεται τα δεδομένα για την εγγραφή ενός νέου χρήστη. Αυτή η φόρμα θα κάνει post τα δεδομένα σε 
ένα άλλο αρχείο, το doregister.jsp το οποίο θα τα επεξεργάζεται για τυχόν λάθη (π.χ κενά πεδία, διαφορετικοί κωδικοί, έλεγχος στοιχείων)
και κατόπιν θα τα εισάγει στη βάση δεδομένων. Σε περίπτωση επιτυχούς εισαγωγής, θα εμφανίζεται κατάλληλο μήνυμα και σε περίπτωση
αποτυχίας, ομοίως. Επομένως όταν έχουμε να κάνουμε με φόρμες ή με αλλαγές στοιχείων θα έχουμε ένα αρχείο (π.χ. login.jsp, change_stuff.jsp,
change_view.jsp) και αυτό θα στέλνει τα δεδομένα προς επεξεργασία σε ένα άλλο αρχείο (π.χ. dologin.jsp, dochange_stuff.jsp, dochange_view.jsp).

3. Για την επιλογή ενός υπευθύνου έργου, εμφανίζουμε στο χρήστη τα δεδομένα σε λίστα με radiobutton, έτσι ώστε να είναι αναγκάζεται να επιλέξει 
μόνον έναν υπεύθυνο για το έργο. Αντιθέτως, όταν πρόκειται να επιλέξουμε προσωπικό για ένα έργο, τότε το εμφανίζουμε στο χρήστη με τη χρήση
του checkbox έτσι ώστε να μπορεί να επιλέξει παραπάνω από έναν εργαζομένους. 

4. Σχετικά με την επιλογή των εργαζομένων, αντιμετωπίσαμε το εξής πρόβλημα. Ενώ είχαμε σε ένα πίνακα τα ονόματα των εργαζομένων που θα 
εκτελούν ένα έργο, δεν μπορούσαμε να τα αποθεκεύουμε στη βάση με κάποια δομή ώστε να τα ανακτήσουμε με απλό τρόπο. Για το λόγο αυτό 
κάναμε το εξής. Τον πίνακα αυτόν, τον κάναμε "επίπεδο", αποθηκεύοντας τις εγγραφές του σε ένα String χωρισμένες με κόμμα. Έτσι ήταν πολύ
πιο εύκολο να αποθηκεύσουμε ένα string στη βάση. Όταν πρέπει να το ανακτήσουμε, τότε το επεξεργαζόμαστε με τη βοήθεια των συναρτήσεων της
java (π.χ. trim();) και ξαναχωρίζουμε τις τιμές του (τα ονόματα δλδ) και τις τοποθετούμε σε ένα πίνακα πάλι.

5. Στο θέμα της ασφάλειας, δηλαδή ο κάθε τύπος χρήστη κατα πόσο έχει ελευθερία να δει τις λειτουργίες και τα μενού ενός άλλου τύπου
χρήστη, έχουμε να κάνουμε τις εξής παρατηρήσεις. Ας πάρουμε για παράδειγμα έναν visitor. Αν ο visitor εισέλθει κανονικά στην εφαρμογή,
και μεταβεί στην αρχική σελίδα του, τότε στον browser του θα εμφανιστεί το Link: user_index_stuff.jsp. Τίποτα όμως δεν τον εμποδίζει 
από το να δώσει για παράδειγμα το link: user_index_administrator.jsp και να δει το μενού του administrator. Για να αντιμετωπίσουμε το
πρόβλημα αυτό, χρησιμοποιούμε το session. Αποθηκεύουμε δηλαδή τα στοιχεία ενός χρήστη στον πίνακα session μόλις αυτός κάνει Login και 
στην πορεία τα χρησιμοποιούμε για να του εμφανίσουμε τα κατάλληλα μενού. Αν δηλαδή ένας χρήστης δεν έχει κάνει για παράδειγμα Login 
ως administrator, δεν μπορεί να δει τις λειτουργίες του administrator. Αυτό όμως το έχουμε υλοποιήσει (για να γλυτώσουμε λίγο χρόνο)
μόνο για την αρική σελίδα κάθε τύπου χρήστη. Σίγουρα όμως αν πρόκειται για εφαρμογη που πρεπει τεθεί σε λειτουργία και να βγει Online
θα δώσουμε σημασία στο θέμα αυτό, δίνοντας τον απαραίτητο έλεγχο, όχι μόνο για την αρχική σελίδα, αλλά για όλες τις λειτουργίες κάθε χρήστη.

6. Στο θέμα της κρυπτογραφήσης των κωδικών πρόσβασης των χρηστών, δεν έχουμε φτιάξει κάτι. Οι κωδικοί είναι απλά string (με type = password
στη φόρμα για να εμφανίζονται ****** όταν τον πληκτρολογεί ο χρήστης) και μπορεί να τους δει ο διαχειριστής της βάσης.